import asyncio
import json
import os
import random
import hashlib

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    BotCommand,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent
)

# Load environment variables
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")  # Make sure your .env file has BOT_TOKEN=your_token

# File paths
BALANCES_FILE = "user_balances.json"
STATS_FILE = "user_stats.json"

# Global variables
user_balances = {}
user_stats = {}

# FSM (Finite State Machine) classes
class BetState(StatesGroup):
    entering_bet = State()

class VivodState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_username = State()

# Storage functions
def load_balances():
    global user_balances
    if os.path.exists(BALANCES_FILE):
        try:
            with open(BALANCES_FILE, 'r', encoding='utf-8') as f:
                user_balances = {int(k): v for k, v in json.load(f).items()}
        except Exception as e:
            print(f"Error loading balances: {e}")
            user_balances = {}
    else:
        user_balances = {}

def save_balances():
    try:
        with open(BALANCES_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_balances, f)
    except Exception as e:
        print(f"Error saving balances: {e}")

def load_stats():
    global user_stats
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, "r", encoding="utf-8") as f:
                user_stats = json.load(f)
        except Exception as e:
            print(f"Error loading stats: {e}")
    else:
        user_stats = {}

def save_stats():
    try:
        with open(STATS_FILE, "w", encoding="utf-8") as f:
            json.dump(user_stats, f)
    except Exception as e:
        print(f"Error saving stats: {e}")

def increment_games_played(user_id):
    str_user_id = str(user_id)
    if str_user_id not in user_stats:
        user_stats[str_user_id] = {"games_played": 0}
    
    user_stats[str_user_id]["games_played"] = user_stats[str_user_id].get("games_played", 0) + 1
    save_stats()

# Game class
class ActiveGame:
    def __init__(self, bet: int):
        self.bet = bet
        self.multiplier = 1.0
        self.running = True

active_games = {}

# Create routers
start_router = Router()
balance_router = Router()
top_router = Router()
game_router = Router()
profile_router = Router()
vivod_router = Router()

# Start router handlers
@start_router.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # Initialize user balance if they don't have one
    if user_id not in user_balances:
        user_balances[user_id] = 500
        save_balances()

    # Create buttons for bets
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="10$", callback_data="play_10")],
            [InlineKeyboardButton(text="50$", callback_data="play_50")],
            [InlineKeyboardButton(text="100$", callback_data="play_100")],
            [InlineKeyboardButton(text="200$", callback_data="play_200")],
            [InlineKeyboardButton(text="500$", callback_data="play_500")],
            [InlineKeyboardButton(text="üí∞ –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É", callback_data="enter_bet")]
        ]
    )

    # Send message with bet options
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –£ —Ç–µ–±—è {user_balances[user_id]}$. –í—ã–±–µ—Ä–∏ —Å—É–º–º—É –¥–ª—è –∏–≥—Ä—ã.",
        reply_markup=kb
    )

@start_router.callback_query(lambda c: c.data.startswith("play_"))
async def handle_bet(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    bet = int(callback.data.split("_")[1])  # Extract bet from callback_data

    # Check if user has enough balance
    if user_balances.get(user_id, 0) < bet:
        await callback.message.answer("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
        return

    # Subtract bet from user balance
    user_balances[user_id] -= bet
    save_balances()

    # Create a new game for the user
    active_games[user_id] = ActiveGame(bet)
    
    # Start the game
    x = await callback.message.answer(f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –°—Ç–∞–≤–∫–∞ {bet}$.")
    await run_game(user_id, x)

@start_router.callback_query(lambda c: c.data == "enter_bet")
async def ask_for_bet(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BetState.entering_bet)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (—á–∏—Å–ª–æ–º):")
    await callback.answer()

@start_router.message(BetState.entering_bet)
async def process_custom_bet(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        bet = int(message.text)
        if bet <= 0:
            raise ValueError("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        if user_balances.get(user_id, 0) < bet:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:")
            return
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balances[user_id] -= bet
    save_balances()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_games[user_id] = ActiveGame(bet)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    x = await message.answer(f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –°—Ç–∞–≤–∫–∞ {bet}$.")
    await run_game(user_id, x)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è run_game –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
    
# Balance router handlers
@balance_router.message(Command("balance"))
async def show_balance(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_balances:
        user_balances[user_id] = 500
        save_balances()
    
    await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")

async def get_top_players_text(limit=10):
    if not user_balances:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–ø–∏—Å–∫–µ!"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É –∏ –±–µ—Ä–µ–º —Ç–æ–ø
    top_users = sorted(user_balances.items(), key=lambda x: x[1], reverse=True)[:limit]
    
    top_message = "üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
    
    for i, (user_id, balance) in enumerate(top_users, 1):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await bot.get_chat(user_id)
            username = user_info.username or user_info.first_name or f"–ò–≥—Ä–æ–∫ #id{user_id}"
            top_message += f"{i}. {username} ‚Äî {balance}$\n"
        except Exception:
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å
            top_message += f"{i}. –ò–≥—Ä–æ–∫ #id{user_id} ‚Äî {balance}$\n"
    
    return top_message

    
@top_router.message(Command("top"))
async def show_top_players(message: types.Message):
    top_message = await get_top_players_text()
    await message.answer(top_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤
@top_router.inline_query()
async def inline_query_handler(inline_query: InlineQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–µ top
    if inline_query.query.lower() in ['top', '—Ç–æ–ø', '–ª–∏–¥–µ—Ä—ã', 'leaders']:
        top_text = await get_top_players_text()
        
        # –°–æ–∑–¥–∞–µ–º ID –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ö–µ—à –æ—Ç —Ç–µ–∫—Å—Ç–∞ + —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        result_id = hashlib.md5(f"{top_text}_{inline_query.id}".encode()).hexdigest()
        
        # –°–æ–∑–¥–∞–µ–º inline-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results = [
            InlineQueryResultArticle(
                id=result_id,
                title="–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ üèÜ",
                description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É",
                input_message_content=InputTextMessageContent(
                    message_text=top_text,
                    parse_mode=ParseMode.HTML
                ),
                thumb_url="https://cdn-icons-png.flaticon.com/512/4489/4489871.png",
                thumb_width=48,
                thumb_height=48
            )
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await inline_query.answer(results=results, cache_time=30)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        result_id = hashlib.md5(f"help_{inline_query.id}".encode()).hexdigest()
        
        results = [
            InlineQueryResultArticle(
                id=result_id,
                title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                description="–í–≤–µ–¥–∏—Ç–µ 'top' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤",
                input_message_content=InputTextMessageContent(
                    message_text="<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ inline-–∫–æ–º–∞–Ω–¥—ã:</b>\n‚Ä¢ <code>top</code> - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤",
                    parse_mode=ParseMode.HTML
                )
            )
        ]
        
        await inline_query.answer(results=results, cache_time=300)

# Game router handlers
@game_router.message(Command("game"))
async def start_game(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    if user_id not in user_balances:
        user_balances[user_id] = 500
        save_balances()

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="10$", callback_data="play_10")],
            [InlineKeyboardButton(text="50$", callback_data="play_50")],
            [InlineKeyboardButton(text="100$", callback_data="play_100")],
            [InlineKeyboardButton(text="200$", callback_data="play_200")],
            [InlineKeyboardButton(text="500$", callback_data="play_500")],
            [InlineKeyboardButton(text="üí∞ –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É", callback_data="enter_bet")]
        ]
    )

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –£ —Ç–µ–±—è {user_balances[user_id]}$. –í—ã–±–µ—Ä–∏ —Å—É–º–º—É –¥–ª—è –∏–≥—Ä—ã.",
        reply_markup=kb
    )

async def run_game(user_id: int, message: types.Message):
    # Increment games played counter
    increment_games_played(user_id)
    
    while active_games[user_id].running:
        await asyncio.sleep(random.uniform(0.5, 1.5))
        
        if user_id not in active_games:
            break
        
        active_games[user_id].multiplier += round(random.uniform(0.1, 0.5), 2)
        
        try:
            await message.edit_text(
                f"–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: x{active_games[user_id].multiplier:.2f}",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üõë –°—Ç–æ–ø", callback_data="stop_game")]]
                )
            )
        except Exception:
            pass

        if random.random() < 0.05:
            await message.edit_text("‚ùå –ú–∞—à–∏–Ω–∫–∞ —Ä–∞–∑–±–∏–ª–∞—Å—å! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤—Å—é —Å—É–º–º—É.")
            active_games.pop(user_id, None)
            save_balances()
            break

@game_router.callback_query(lambda c: c.data == "stop_game")
async def stop_game(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id in active_games:
        game = active_games[user_id]
        game.running = False
        
        # Calculate winnings
        winnings = int(game.bet * game.multiplier)
        user_balances[user_id] += winnings
        save_balances()
        
        # Remove game from active games
        active_games.pop(user_id)
        
        await callback.message.edit_text(
            f"üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {game.bet}$\n"
            f"‚úñÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{game.multiplier:.2f}\n"
            f"üíµ –í—ã–∏–≥—Ä—ã—à: {winnings}$"
        )

# Profile router handlers
@profile_router.message(Command("profile"))
async def show_profile(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    # Ensure user has a balance
    if user_id not in user_balances:
        user_balances[user_id] = 500
        save_balances()
    
    balance = user_balances[user_id]
    
    # Get games played from stats
    str_user_id = str(user_id)
    games_played = user_stats.get(str_user_id, {}).get("games_played", 0)

    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"üÜî <b>ID:</b> {user_id}\n"
        f"üìõ <b>–ò–º—è:</b> {first_name}\n"
        f"üîó <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username if username else '–ù–µ—Ç'}\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance}$\n"
        f"üéÆ <b>–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä:</b> {games_played}"
    )

    await message.answer(profile_text)

# Vivod (withdrawal) router handlers

@vivod_router.message(Command("vivod"))
async def start_vivod(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:")
    await state.set_state(VivodState.waiting_for_amount)

@vivod_router.message(Command("cancel"))
async def cancel_vivod(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–≤–æ–¥–∞
    current_state = await state.get_state()
    
    if current_state in [VivodState.waiting_for_amount, VivodState.waiting_for_username]:
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer("‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.")
    else:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–≤–æ–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@vivod_router.message(VivodState.waiting_for_amount)
async def process_vivod_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        if amount > user_balances.get(user_id, 0):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    await state.update_data(amount=amount)
    await state.set_state(VivodState.waiting_for_username)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø—Ä–∏–º–µ—Ä: @durov):")

@vivod_router.message(VivodState.waiting_for_username)
async def process_vivod_username(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    amount = data["amount"]
    username = message.text.strip()

    if not username.startswith("@") or len(username) < 2:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º! –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    user_balances[user_id] -= amount
    save_balances()
    await state.clear()

    await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! {amount}$ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ @unbrokensociety üéâ")


# Main function
async def main():
    global bot
    # Create bot instance
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    
    # Create dispatcher
    dp = Dispatcher()
    
    # Load user data
    load_balances()
    load_stats()
    
    # Register all routers
    dp.include_router(vivod_router)
    dp.include_router(profile_router)
    dp.include_router(start_router)
    dp.include_router(balance_router)
    dp.include_router(top_router)
    dp.include_router(game_router)
    
    # Start polling
    print("Bot started!")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"Error during bot execution: {e}")
    finally:
        # Save user data when bot stops
        print("Saving balances and shutting down...")
        save_balances()
        save_stats()
        await bot.session.close()
        print("Bot stopped.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped manually.")
