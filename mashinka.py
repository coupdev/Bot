import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

TOKEN = ""
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

FAKE_PAYMENT_LINK = "t.me/send?start=IVDRMGlTT9No"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
class GameState(StatesGroup):
    waiting_for_payment = State()
    playing = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
active_games = {}

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç (–Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã)
@dp.message(CommandStart())
async def start_game(message: types.Message, state: FSMContext):
    await state.set_state(GameState.waiting_for_payment)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=FAKE_PAYMENT_LINK)]]
    )
    await message.answer("–û–ø–ª–∞—Ç–∏ —Å—á–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!", reply_markup=kb)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã)
@dp.message(lambda msg: msg.text.lower() == "—è –æ–ø–ª–∞—Ç–∏–ª")
async def confirm_payment(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in active_games:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        return

    await state.set_state(GameState.playing)
    active_games[user_id] = {"multiplier": 1.0, "running": True}

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üõë –°—Ç–æ–ø", callback_data="stop_game")]]
    )
    await message.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ß–µ–º –¥–æ–ª—å—à–µ –∂–¥–µ—à—å, —Ç–µ–º –≤—ã—à–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å!", reply_markup=kb)

    await run_game(user_id)

# –õ–æ–≥–∏–∫–∞ —Ä–æ—Å—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
async def run_game(user_id: int):
    while user_id in active_games and active_games[user_id]["running"]:
        await asyncio.sleep(random.uniform(0.5, 1.5))  # –†–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ä–æ—Å—Ç–∞
        if user_id not in active_games:  
            break
        active_games[user_id]["multiplier"] += round(random.uniform(0.1, 0.5), 2)
        await bot.send_message(user_id, f"–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: x{active_games[user_id]['multiplier']:.2f}")

        if random.random() < 0.05:  # 5% —à–∞–Ω—Å –Ω–∞ –∞–≤—Ç–æ-–∫—Ä–∞—à
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart_game")]]
            )
            await bot.send_message(user_id, "‚ùå –ú–∞—à–∏–Ω–∫–∞ —Ä–∞–∑–±–∏–ª–∞—Å—å! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤—Å—é —Å—É–º–º—É.", reply_markup=kb)
            active_games.pop(user_id, None)
            break

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–æ–ø"
@dp.callback_query(lambda c: c.data == "stop_game")
async def stop_game(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in active_games or not active_games[user_id]["running"]:
        await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!", show_alert=True)
        return

    multiplier = active_games[user_id]["multiplier"]
    active_games[user_id]["running"] = False
    await callback.message.answer(f"–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è! –í–∞—à –≤—ã–∏–≥—Ä—ã—à —É–º–Ω–æ–∂–µ–Ω –Ω–∞ x{multiplier:.2f} üéâ")
    active_games.pop(user_id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"
@dp.callback_query(lambda c: c.data == "restart_game")
async def restart_game(callback: types.CallbackQuery, state: FSMContext):
    await start_game(callback.message, state)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if name == "__main__":
    asyncio.run(main())