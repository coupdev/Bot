import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import random

TOKEN = "YOUR_BOT_TOKEN"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–µ–Ω—å–≥–∏
start_balance = 500  # 500 –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –¥–æ–ª–ª–∞—Ä–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_balance = {}

# –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
multiplier = 0.1  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (x0.1)

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message(CommandStart())
async def start_game(message: types.Message):
    user_id = message.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    if user_id not in user_balance:
        user_balance[user_id] = start_balance

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –¢—Ä–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –∏–≥—Ä—É", callback_data="spend_money")]
        ]
    )
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è –µ—Å—Ç—å {user_balance[user_id]} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –¥–æ–ª–ª–∞—Ä–æ–≤. –ì–æ—Ç–æ–≤ –∏–≥—Ä–∞—Ç—å?", reply_markup=kb)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏
@dp.callback_query(lambda c: c.data == "spend_money")
async def spend_money(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    kb = InlineKeyboardMarkup(row_width=2)
    for amount in [10, 50, 100, 200, 500]:  # –î–æ–±–∞–≤–∏–ª 500$ –∫–∞–∫ –æ–ø—Ü–∏—é
        kb.add(InlineKeyboardButton(text=f"–¢—Ä–∞—Ç–∏—Ç—å {amount}$", callback_data=f"spend_{amount}"))
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –¥–æ–ª–ª–∞—Ä–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –∏–≥—Ä—É:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–ª—è –∏–≥—Ä—ã
@dp.callback_query(lambda c: c.data.startswith("spend_"))
async def play_game(callback_query: types.CallbackQuery):
    global multiplier  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é multiplier
    user_id = callback_query.from_user.id
    amount_spent = int(callback_query.data.split("_")[1])

    if user_balance[user_id] < amount_spent:
        await callback_query.answer(f"–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∏–≥—Ä—ã. –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {user_balance[user_id]}$.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance[user_id] -= amount_spent

    # –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å (—Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–∏–≥—Ä—ã—à —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º)
    game_result = random.choice(["win", "lose"])

    if game_result == "win":
        # –í—ã–∏–≥—Ä—ã—à: —Å—Ç–∞–≤–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        winnings = amount_spent * multiplier
        user_balance[user_id] += winnings

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0.1 –¥–æ 1000.0
        multiplier = random.uniform(0.1, 1000.0)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 1000.0

        await callback_query.message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª! –¢–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{multiplier:.2f}. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]}$")
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à: –≤—Å—è —Å—Ç–∞–≤–∫–∞ —Å–≥–æ—Ä–∞–µ—Ç, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ 0.1
        multiplier = 0.1
        await callback_query.message.answer(f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –í—Å—è —Å—Ç–∞–≤–∫–∞ —Å–≥–æ—Ä–µ–ª–∞. –¢–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–±—Ä–æ—à–µ–Ω –Ω–∞ x{multiplier}. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]}$")

if __name__ == "__main__":
    import asyncio
    from aiogram import executor
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
